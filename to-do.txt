Para cada elemento de rede cadastrado, o gerente deve 
solicitar informações sobre:
- % de uso de memoria;
- % uso de cpu;
- % uso de disco;
Emitir um sinal para um celular caso um desses parametros
ultrapasse 90% de uso ou se o recurso sair da rede.
bit.ly/1tk3fE4 - Linux SNMP OID’s for CPU,Memory and Disk Statistics
bit.ly/1S4JjxK - Monitor a Windows Server using SNMP
bit.ly/1Ugwbc8 - Testing your SNMP Implementation
bit.ly/254Qux1 - Monitoring System Parameters like Memory, CPU and Disks on Linux Systems via SNMP
bit.ly/1RPg4MR - Finding CPU/Mem Utilization for Windows system
bit.ly/1PcBkKq - Pegar informações de CPU via SNMP
    
- Salvar os elementos de rede em um arquivo(?);
- Se salvar num arquivo fazer um script php pra carregar os dispositivos cadastrados numa tabela;
- Cada entrada da tabela sera um link;
- Clicando no link exibira as informações de uso da maquina;
- Caso seja maior que 90 ou nao exista, emitir umm aviso para o celular;
- Criar um script criando socket pra mandar uma mensagem de erro para o celular;
- Fazer um app pra notificaçao(?)


 $alloc_unity_size = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.4")));
  $total_storage_size = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.5")));
  $total_storage_used = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.6")));
  $cpu_usage = treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.3.3.1.2"));
  
  
  
  https://lists.oetiker.ch/pipermail/mrtg/2006-September/031886.html
  .1.3.6.1.2.1.25.2.3.1.2 will give storage types (differentiating between
Floppy, HD, CD, Virtual and RAM)
.1.3.6.1.2.1.25.2.3.1.3 will give drive letters, labels and in the case
of Virt/RAM it just says Virtual Memory or Physical Memory
.1.3.6.1.2.1.25.2.3.1.4 gives the allocation unit size (multiply .5/.6
below by this to get the real totals)
.1.3.6.1.2.1.25.2.3.1.5 gives the total storage size (multiply by .4
above to get actual bytes)
.1.3.6.1.2.1.25.2.3.1.6 gives the total storage used (multiply by .4
above to get actual bytes)
.1.3.6.1.2.1.25.2.3.1.7 give the total storage allocation failures (HD
errors?)

On Windows, CPU utilization can be queried through the following MIB: .1.3.6.1.2.1.25.3.3.1.2

http://stackoverflow.com/questions/11924446/how-can-i-find-what-is-oid-for-cpu-usage-in-windows-7
http://www.loriotpro.com/ServiceAndSupport/How_to/How_to_control_Memory_usage.php

<HTML>
<META CHARSET="UTF-8">
<HEAD>
    <TITLE>Resultados da consulta</TITLE>
    </HEAD>
<BODY>
<?php

function treatArray($array) {
    for($i = 0; $i < sizeof($array); $i++) {
        $pos = strpos($array[$i]," ");
        $array[$i] = substr($array[$i],$pos+1);
    }
    return $array;
}

function convertArrayToInt($array) {
    for($i = 0; $i < sizeof($array); $i++) {
        $array[$i] = intval($array[$i]);
    }
    return $array;
}

function printAllInfo($ip) {
    $all = snmpwalkoid("$ip", "public", "");
    for(reset($all); $i = key($all); next($all)) {
        echo "$i: $all[$i]<BR>";
    }
    echo "<BR>";
}
//--------------------------------------------------------------------------
  $ip = $_POST["ip"];

  $host_name = treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.1.5.0"));
  $devices = treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.3"));
  $alloc_unity_size = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.4")));
  $total_storage_size = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.5")));
  $total_storage_used = convertArrayToInt(treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.2.3.1.6")));
  $current_ip = treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.4.20.1.1"));
  echo '<table class="infoTable" border=1>';
      echo '<tr class="tableTitle">';
          echo '<th colspan="4"><b>Informa&ccedil;&atilde;o de gerenciamento</b></th>';
      echo '</tr>';
      echo '<tr>';
          echo '<td><b><i>Host:</i></b></td>';
          echo '<td colspan="2" class="machineInfo">', "$host_name[0]", '</td>';
      echo '</tr>';
      echo '<tr>';
          echo '<td><b><i>IP:</i></b></td>';
          echo '<td colspan="2" class="machineInfo">', "$current_ip[1]", '</td>';
      echo '</tr>';
      echo '<tr class="titleSection">';
          echo '<th colspan="3"><b>Armazenamento</b></th>';
      echo '</tr>';
      echo '<tr>';
         echo '<th><i>Dispositivo</i></th>';
         echo '<th><i>Total</i> (GB)</th>';
         echo '<th><i>Utilizado</i> (GB)</th>';
      echo '</tr>';
  for ($i = 0; $i < sizeof($devices); $i++){
      echo '<tr>';
          echo '<td>', "$devices[$i]", '</td>';
          echo '<td align="center">', ($total_storage_size[$i]*$alloc_unity_size[$i]/(1024*3)), '</td>';
          echo '<td align="center">', ($total_storage_used[$i]*$alloc_unity_size[$i]/(1024*3)), '</td>';
      echo '</tr>';
  }
      echo '<tr>';
          echo '<th colspan="3" class="titleSection"><b>CPU</b></th>';
      echo '</tr>';
      echo '<tr>';
          echo '<th ><i>Unidade</i></th>';
          echo '<th colspan="2"><i>Uso</i> (%)</th>';
      echo '</tr>';
  $cpu_usage = treatArray(snmpwalk("$ip", "public", "iso.3.6.1.2.1.25.3.3.1.2"));
  for($i = 0; $i < sizeof($cpu_usage); $i++) {
      echo '<tr>';
          echo '<td align="center">', ($i+1), '</td>';
          echo '<td align="center" colspan="2">', $cpu_usage[$i], '</td>';
      echo '</tr>';
  }
  echo '</table>';
  echo '<BR>';
  
  
  
?>
</BODY>
</HTML>



package com.example.androidserversocket;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Enumeration;

import com.example.client_server.R;

import android.os.Bundle;
import android.app.Activity;
import android.widget.TextView;

public class MainActivity extends Activity {

	TextView info, infoip, msg;
	String message = "";
	ServerSocket serverSocket;
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		info = (TextView) findViewById(R.id.info);
		infoip = (TextView) findViewById(R.id.infoip);
		msg = (TextView) findViewById(R.id.msg);

		infoip.setText(getIpAddress());

		Thread socketServerThread = new Thread(new SocketServerThread());
		socketServerThread.start();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();

		if (serverSocket != null) {
			try {
				serverSocket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private class SocketServerThread extends Thread {

		static final int SocketServerPORT = 8080;
		int count = 0;

		@Override
		public void run() {
			try {
				serverSocket = new ServerSocket(SocketServerPORT);
				MainActivity.this.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						info.setText("Porta: "
								+ serverSocket.getLocalPort());
					}
				});

				while (true) {
					Socket socket = serverSocket.accept();
					count++;
					DataInputStream dis = new DataInputStream(socket.getInputStream());
					message =count+" - "+dis.readLine()+"\n";
					
					//message += "#" + count + " from " + socket.getInetAddress()
					//		+ ":" + socket.getPort() + "\n";
					MainActivity.this.runOnUiThread(new Runnable() {

						@Override
						public void run() {
							msg.setText(message);
						}
					});

					/*SocketServerReplyThread socketServerReplyThread = new SocketServerReplyThread(
							socket, count);
					socketServerReplyThread.run();*/

				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	/*private class SocketServerReplyThread extends Thread {

		private Socket hostThreadSocket;
		int cnt;

		SocketServerReplyThread(Socket socket, int c) {
			hostThreadSocket = socket;
			cnt = c;
		}

		@Override
		public void run() {
			OutputStream outputStream;
			String msgReply = "Hello from Android, you are #" + cnt;

			try {
				outputStream = hostThreadSocket.getOutputStream();
				PrintStream printStream = new PrintStream(outputStream);
				printStream.print(msgReply);
				printStream.close();

				message += "replayed: " + msgReply + "\n";

				MainActivity.this.runOnUiThread(new Runnable() {

					@Override
					public void run() {
						msg.setText(message);
					}
				});

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				message += "Something wrong! " + e.toString() + "\n";
			}

			MainActivity.this.runOnUiThread(new Runnable() {

				@Override
				public void run() {
					msg.setText(message);
				}
			});
		}

	}*/

	private String getIpAddress() {
		String ip = "";
		try {
			Enumeration<NetworkInterface> enumNetworkInterfaces = NetworkInterface
					.getNetworkInterfaces();
			while (enumNetworkInterfaces.hasMoreElements()) {
				NetworkInterface networkInterface = enumNetworkInterfaces
						.nextElement();
				Enumeration<InetAddress> enumInetAddress = networkInterface
						.getInetAddresses();
				while (enumInetAddress.hasMoreElements()) {
					InetAddress inetAddress = enumInetAddress.nextElement();

					if (inetAddress.isSiteLocalAddress()) {
						ip += "Meu ip: " 
								+ inetAddress.getHostAddress() + "\n";
					}

				}

			}

		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			ip += "Something Wrong! " + e.toString() + "\n";
		}

		return ip;
	}
}